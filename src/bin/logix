#!/usr/bin/python

# needs latest gevent
from gevent.server import DatagramServer
from gevent import monkey
monkey.patch_all()

import os
import re
import pwd
import sys
import math
import time
import getopt
import logging
import ConfigParser
from supay import Daemon
from kombu import Queue, BrokerConnection
from kombu.pools import connections

hostname = os.uname()[1]
severity = ['emerg', 'alert', 'crit', 'err', 'warn', 'notice', 'info', 'debug']
facility = ['kern', 'user', 'mail', 'daemon', 'auth', 'syslog', 'lpr', 'news', 'uucp', 
            'cron', 'authpriv', 'ftp', 'ntp', 'audit', 'alert', 'at', 'local0', 'local1', 
            'local2', 'local3', 'local4', 'local5', 'local6', 'local7']

fs_match = re.compile("<(.+)>([A-Z]{3} .*)", re.I)


class SyslogServer(DatagramServer):
    def __init__(self, listener, connection=None, queue=None, packet_size=1024):
        DatagramServer.__init__(self, listener, packet_size=packet_size)
        self._connection = connection
        self._queue = queue

    def handle(self, data, address):
        print '%s: got %r' % (address[0], data)
        self.socket.sendto('Received %s bytes' % len(data), address)
        self._parse_and_queue_datagram(data, address)
    
    def _parse_and_queue_datagram(self, data, address):
        parsed = {}
        (fac, sev, parsed['data']) = self._calc_lvl(data.strip())
        parsed['host'] = address if not '127.0.0.1' in address else hostname
        parsed['timestamp'] = time.time()
        parsed['facility'] = fac
        parsed['level'] = sev
        parsed['version'] = '1.0'
        parsed['short_message'] = "%s" % (parsed['data'])

        with connections[self._connection].acquire(block=True) as conn:
            with conn.SimpleQueue(self._queue) as queue:
                queue.put(parsed, serializer="json")

    def _calc_lvl(self, line):
        lvl = fs_match.split(line)
        if lvl and len(lvl) > 1:
            i = int(lvl[1])
            fac = int(math.floor(i / 8))
            sev = i - (fac * 8)
            return (facility[fac].capitalize(), sev, lvl[2])
        return (None, None, lvl[2])



def main():
    logging.info("Starting Logix")
    config_file = '/etc/logix/logix.conf' if os.path.isfile('/etc/logix/logix.conf') else os.getenv('LOGIX_CONF')
    if not os.path.isfile(config_file):
        logging.error("Config file %s not found" % config_file)
        sys.exit(1)

    config = ConfigParser.RawConfigParser()
    config.read(config_file)

    conn = BrokerConnection(config.get('transport','url')) 
    conn.connect()

    syslog_server = SyslogServer(':%d' % config.getint('server', 'port'),
            connection = conn,
            queue=config.get('transport', 'queue'),
            packet_size=config.getint('server', 'max_syslog_line_size') - 1)

    syslog_server.serve_forever()

if __name__ == '__main__':
    try:
        opts, args = getopt.getopt(sys.argv[1:], "a:", ["action="])
    except getopt.GetoptError, err:
        print str(err)

    action = 'start'
    for o, a in opts:
        if o in ('-a', '--action'):
            action = a

    daemon = Daemon(name='loggix', catch_all_log="/var/log/logix.log")
    if action == 'start':
        os.setuid(pwd.getpwnam('logix')[2])
        daemon.start()
        main()
    elif action == 'status':
        daemon.status()
    elif action == 'stop':
        daemon.stop()
    elif action == 'nodaemon':
        main()
